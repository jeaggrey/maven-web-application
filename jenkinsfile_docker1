// Prequisites
// A server with Jenkins and Docker running on it (Jenkins user should be allowed to run Docker).
// Github account.
// Docker hub account.
// Install the Docker Pipelines plugin on Jenkins
// Install/Download kubernetets plugin https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbXotUUl5ZFptMmU0U3kxTHFNU3ZFcmFHTUdHUXxBQ3Jtc0tsV1FnajdpLWtkcWZlZ29fbUVLOW1kZzRsMXBTbjNUclNGSVNyYktTYkFEQzZrTm9KTXl5SDlaXzNMdWRfY0tvSjFyRDc1R1dScnlWcDIzblFjTHlLUDA2VklMN2liSWNYazR5eEFLcnhEaDNfeVJ1WQ&q=https%3A%2F%2Fupdates.jenkins.io%2Fdownload%2Fplugins%2Fkubernetes-cd%2F1.0.0%2Fkubernetes-cd.hpi&v=XE_mAhxZpwU
// Docker Hub account details. Go to Credentials → Global → Add credentials  
// Note that if you set the ID, you will need this specific ID to refer this credential from your scripts. Here we are just using dockerhub_id.

pipeline{
  environment {
    registry = "jeaggrey/webapp"
    registryCredential = 'DockerHubCred' //Credential name in Jenkins for Dockerhub
    dockerImage = ''
  }
  agent any 
  tools {
    maven "maven3.9.0" //Pick Maven Version
  }  
  stages {
    stage('1GetCode'){
      steps{
        sh "echo 'cloning the latest application version' "
       git credentialsId: 'GithubCred', url: 'https://github.com/jeaggrey/maven-web-application' //Use your own github account 
      }
    }
    stage('3Test+Build'){
      steps{
        sh "echo 'running JUnit-test-cases' "
        sh "echo 'testing must passed to create artifacts ' "
        sh "mvn clean package"
      }
    }
  stage('4CodeQuality'){
       steps{
         sh "echo 'Perfoming CodeQualityAnalysis' "
         sh "mvn sonar:sonar"
       }
    }
   stage('5uploadNexus'){
      steps{
        sh "mvn deploy"
      }
    } 

 stage('6BuildImage'){
      steps{

      script {
        dockerImage = docker.build registry + ":$BUILD_NUMBER" //use build number as image tag
      }   sh "echo 'Building Docker Image' "
       
      }
    }
     stage('7PushImage'){
      steps{
      script {
        docker.withRegistry( '', registryCredential )
        {
        dockerImage.push()
       }  
      }  
        sh "echo 'Building Docker Image'"
       }
    }
stage('8Deploying image to Kubernetes') {
      steps {
        script {
          kubernetesDeploy(configs: "deploymentservice.yml", kubeconfigId: "kubernetes") //kubernetes filename to deploy //add latest tag to kubermetets image 
        }
      }
    }

  }
}

  